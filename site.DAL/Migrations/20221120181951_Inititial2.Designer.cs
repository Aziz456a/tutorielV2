// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using site.DAL;

#nullable disable

namespace site.DAL.Migrations
{
    [DbContext(typeof(siteContext))]
    [Migration("20221120181951_Inititial2")]
    partial class Inititial2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("site.BL.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            Url = "http://blogs.packtpub.com/dotnet"
                        },
                        new
                        {
                            BlogId = 2,
                            Url = "http://blogs.packtpub.com/dotnetcore"
                        });
                });

            modelBuilder.Entity("site.BL.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            BlogId = 1,
                            Content = "Dotnet 4.7 Released Contents",
                            PublishedDateTime = new DateTime(2022, 11, 20, 19, 19, 51, 744, DateTimeKind.Local).AddTicks(4324),
                            Title = "Dotnet 4.7 Released"
                        },
                        new
                        {
                            PostId = 2,
                            BlogId = 1,
                            Content = ".NET Core 1.1 Released Contents",
                            PublishedDateTime = new DateTime(2022, 11, 20, 19, 19, 51, 744, DateTimeKind.Local).AddTicks(4344),
                            Title = ".NET Core 1.1 Released"
                        },
                        new
                        {
                            PostId = 3,
                            BlogId = 2,
                            Content = "EF Core 1.1 Released Contents",
                            PublishedDateTime = new DateTime(2022, 11, 20, 19, 19, 51, 744, DateTimeKind.Local).AddTicks(4346),
                            Title = "EF Core 1.1 Released"
                        });
                });

            modelBuilder.Entity("site.BL.Post", b =>
                {
                    b.HasOne("site.BL.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("site.BL.Blog", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
